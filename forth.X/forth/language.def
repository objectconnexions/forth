noecho
.( Dictionary reset)
_reset

HEX
0bf80f230 CONSTANT SYSKEY
0bf80f000 CONSTANT OSCCON

0bf880000 CONSTANT IO
0bf886000 CONSTANT PORTA
0bf886100 CONSTANT PORTB
0bf886200 CONSTANT PORTC
0bf886300 CONSTANT PORTD
0bf886400 CONSTANT PORTE

00 CONSTANT ANSEL
10 CONSTANT TRIS
20 CONSTANT PORT
30 CONSTANT LAT
40 CONSTANT ODC
50 CONSTANT CNPU
60 CONSTANT CNPD
70 CONSTANT CNCON
80 CONSTANT CNEN
90 CONSTANT CNSTAT



: SET_BITS ( value value position -- value )
	lshift or
;

\ clear bit at position in register
: BIT_CLR ( addr pos -- ) 
	1 swap lshift swap	\ determine mask
	04 or				\ clear register is 4 registers on
	!					\ write to register
;

\ set bit at position in register
: BIT_SET ( addr pos -- ) 
	1 swap lshift swap	\ determine mask
	08 or				\ set register is 8 registers on
	!					\ write to register
;

\ set bit at position in register
: BIT_INV ( addr pos -- ) 
	1 swap lshift swap	\ determine mask
	0c or				\ set register is 12 registers on
	!					\ write to register
;

: BIT_READ ( addr pos -- val )
	swap @
	swap rshift
	01 and
;

: DIGITAL_IN ( port bit -- )
	swap
	2dup				\ copy params
	ANSEL +				\ determine ANSEL reg address
	swap bit_clr		\ clear analogue flag
	
\	2dup
	TRIS +				\ TRIS register
	swap bit_set		\ set to input
;

: PULL_UP ( port bit -- )
	swap
	2dup
	CNPD +				\ TRIS register
	swap bit_clr		\ set to input
	CNPU +				\ TRIS register
	swap bit_set		\ set to input
;

: PULL_DOWN ( port bit -- )
	swap
	2dup
	CNPU +				\ TRIS register
	swap bit_clr		\ set to input
	CNPD +				\ TRIS register
	swap bit_set		\ set to input
;

: DIGITAL_OUT ( port bit -- )
	swap
	2dup				\ copy params
	ANSEL +				\ determine ANSEL reg address
	swap bit_clr		\ clear analogue flag
	
	2dup
	TRIS +				\ TRIS register
	swap bit_clr		\ set to output

	PORT +				\ PORT register
	swap bit_clr		\ set to output
;

: PORT_ON ( port bit -- )
	swap
	PORT +				\ PORT register
	swap bit_set		\ set to on
;

: PORT_OFF ( port bit -- )
	swap PORT + swap	\ PORT register
	bit_clr				\ set to on
;

: PORT_TOGGLE ( port bit -- )
	swap PORT + swap 	\ PORT register
	bit_inv				\ set to on
;
 
: PORT_STATE ( port bit -- flag )
	swap PORT + swap
	bit_read
;

\ TODO add port state to read bit




: led_flash ( on off addr port - )
	\ on and off duration are one double (timing);
	\ addr and port are another (location)

    2DUP DIGITAL_OUT
	begin
        2DUP port_on

		2SWAP	\ bring timings to top
		2DUP	
        ms		\ delay for first period (on) - in top of double
		drop	\ drop the other half
		
		2SWAP 	\ return location to top
        2DUP port_off

		2SWAP	\ bring timings to top
		2DUP	
		drop	\ drop the first half ro expose the off time
        ms		\ delay for second period

		2SWAP	\ bring location back to top
	again
;

DECIMAL

.( added basic common words)
echo

